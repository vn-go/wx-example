package core

import (
	"crypto/rand"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/golang-jwt/jwt/v5"
)

type jwtService interface {
	// GenerateSecret generates a random secret with length n bytes
	// and returns it as a Base64 URL-safe string (no padding).
	// Recommended size: at least 32 bytes (256 bits).
	GenerateSecret() (string, error)
	// NewJWTWithSecret creates a JWT token signed with HS256 using the provided secret.
	// `secret` should be a Base64 URL-encoded string (generated by GenerateSecret).
	NewJWTWithSecret(secret, subject, Issuer, role, email string, ttl time.Duration) (string, error)
	VerifyJWTWithSecret(secret, authHeader string) (*JWTClaims, error)
	// DecodeJWTNoVerify decodes a JWT without verifying its signature.
	// - tokenOrHeader may be either the raw token "eyJ......" or the Authorization header "Bearer eyJ...".
	// It returns decoded header and payload as map[string]interface{}.
	// Warning: DO NOT use this for authentication/authorization decisions in production.
	DecodeJWTNoVerify(tokenOrHeader string) (payload *JWTClaims, err error)
}
type jwtServiceImpl struct {
	SecretLen int
}

// GenerateSecret generates a random secret with length n bytes
// and returns it as a Base64 URL-safe string (no padding).
// Recommended size: at least 32 bytes (256 bits).
func (jwtSvc *jwtServiceImpl) GenerateSecret() (string, error) {
	// if n <= 0 {
	// 	return "", errors.New("n must be > 0")
	// }
	b := make([]byte, jwtSvc.SecretLen)
	if _, err := rand.Read(b); err != nil {
		return "", err
	}
	// Use RawURLEncoding so it's safe for headers/URLs and has no '=' padding
	return base64.RawURLEncoding.EncodeToString(b), nil
}

type JWTClaims struct {
	jwt.RegisteredClaims        // standard claims
	Role                 string `json:"role"` // custom claim
	Email                string `json:"email"`
}

// NewJWTWithSecret creates a JWT token signed with HS256 using the provided secret.
// `secret` should be a Base64 URL-encoded string (generated by GenerateSecret).
func (jwtSvc *jwtServiceImpl) NewJWTWithSecret(secret, subject, Issuer, role, email string, ttl time.Duration) (string, error) {
	claims := JWTClaims{
		RegisteredClaims: jwt.RegisteredClaims{
			Subject:   subject,
			IssuedAt:  jwt.NewNumericDate(time.Now()),
			ExpiresAt: jwt.NewNumericDate(time.Now().Add(ttl)),
			Issuer:    Issuer, // standard claim (optional)
		},
		Role:  role,
		Email: email,
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)

	key, err := base64.RawURLEncoding.DecodeString(secret)
	if err != nil {
		return "", err
	}

	return token.SignedString(key)
}

// DecodeJWTNoVerify decodes a JWT without verifying its signature.
// - tokenOrHeader may be either the raw token "eyJ......" or the Authorization header "Bearer eyJ...".
// It returns decoded header and payload as map[string]interface{}.
// Warning: DO NOT use this for authentication/authorization decisions in production.
func (jwtSvc *jwtServiceImpl) DecodeJWTNoVerify(tokenOrHeader string) (payload *JWTClaims, err error) {
	const bearerPrefix = "Bearer "

	// Accept "Bearer <token>" or raw token
	token := strings.TrimSpace(tokenOrHeader)
	if strings.HasPrefix(strings.ToLower(token), strings.ToLower(bearerPrefix)) {
		token = strings.TrimSpace(token[len(bearerPrefix):])
	}

	parts := strings.Split(token, ".")
	if len(parts) < 2 {
		return nil, errors.New("invalid token format")
	}

	// decode helper using RawURLEncoding (no padding)
	decodePart := func(s string) ([]byte, error) {
		// base64 RawURLEncoding expects no padding; it will decode properly.
		// But some tokens may include padded base64 - try both if needed.
		b, err := base64.RawURLEncoding.DecodeString(s)
		if err == nil {
			return b, nil
		}
		// try standard URLEncoding with padding fallback
		return base64.URLEncoding.DecodeString(s)
	}

	// Decode header

	// Decode payload
	pb, err := decodePart(parts[1])

	if err := json.Unmarshal(pb, &payload); err != nil {
		return nil, fmt.Errorf("unmarshal payload json: %w", err)
	}

	return payload, nil
}

func (jwtSvc *jwtServiceImpl) VerifyJWTWithSecret(secret, authHeader string) (*JWTClaims, error) {
	// Kiểm tra prefix Bearer
	const prefix = "Bearer "
	if !strings.HasPrefix(authHeader, prefix) {
		return nil, fmt.Errorf("invalid authorization header")
	}

	// Lấy token phần sau "Bearer "
	tokenString := strings.TrimPrefix(authHeader, prefix)

	// Parse key từ base64
	key, err := base64.RawURLEncoding.DecodeString(secret)
	if err != nil {
		return nil, fmt.Errorf("decode secret failed: %w", err)
	}

	// Parse token với claims
	token, err := jwt.ParseWithClaims(tokenString, &JWTClaims{}, func(token *jwt.Token) (interface{}, error) {
		// Kiểm tra algorithm có đúng không
		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
			return nil, fmt.Errorf("unexpected signing method: %v", token.Header["alg"])
		}
		return key, nil
	})
	if err != nil {
		return nil, fmt.Errorf("parse token failed: %w", err)
	}

	// Trả về claims nếu hợp lệ
	if claims, ok := token.Claims.(*JWTClaims); ok && token.Valid {
		return claims, nil
	}

	return nil, fmt.Errorf("invalid token")
}

func newJwtService(cfg *configInfo) jwtService {
	return &jwtServiceImpl{
		SecretLen: cfg.Jwt.SecretLen,
	}
}
