package core

import (
	"crypto/rand"
	"encoding/base64"
	"time"

	"github.com/golang-jwt/jwt/v5"
)

type jwtService interface {
	// GenerateSecret generates a random secret with length n bytes
	// and returns it as a Base64 URL-safe string (no padding).
	// Recommended size: at least 32 bytes (256 bits).
	GenerateSecret() (string, error)
	// NewJWTWithSecret creates a JWT token signed with HS256 using the provided secret.
	// `secret` should be a Base64 URL-encoded string (generated by GenerateSecret).
	NewJWTWithSecret(secret, subject, Issuer, role, email string, ttl time.Duration) (string, error)
}
type jwtServiceImpl struct {
	SecretLen int
}

// GenerateSecret generates a random secret with length n bytes
// and returns it as a Base64 URL-safe string (no padding).
// Recommended size: at least 32 bytes (256 bits).
func (jwtSvc *jwtServiceImpl) GenerateSecret() (string, error) {
	// if n <= 0 {
	// 	return "", errors.New("n must be > 0")
	// }
	b := make([]byte, jwtSvc.SecretLen)
	if _, err := rand.Read(b); err != nil {
		return "", err
	}
	// Use RawURLEncoding so it's safe for headers/URLs and has no '=' padding
	return base64.RawURLEncoding.EncodeToString(b), nil
}

type JWTClaims struct {
	jwt.RegisteredClaims        // standard claims
	Role                 string `json:"role"` // custom claim
	Email                string `json:"email"`
}

// NewJWTWithSecret creates a JWT token signed with HS256 using the provided secret.
// `secret` should be a Base64 URL-encoded string (generated by GenerateSecret).
func (jwtSvc *jwtServiceImpl) NewJWTWithSecret(secret, subject, Issuer, role, email string, ttl time.Duration) (string, error) {
	claims := JWTClaims{
		RegisteredClaims: jwt.RegisteredClaims{
			Subject:   subject,
			IssuedAt:  jwt.NewNumericDate(time.Now()),
			ExpiresAt: jwt.NewNumericDate(time.Now().Add(ttl)),
			Issuer:    Issuer, // standard claim (optional)
		},
		Role:  role,
		Email: email,
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)

	key, err := base64.RawURLEncoding.DecodeString(secret)
	if err != nil {
		return "", err
	}

	return token.SignedString(key)
}

func newJwtService(cfg *configInfo) jwtService {
	return &jwtServiceImpl{
		SecretLen: cfg.Jwt.SecretLen,
	}
}
